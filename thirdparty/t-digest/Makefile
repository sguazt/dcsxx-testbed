# verify that JAVA_HOME is set to something (should be the bare minimum)
ifndef JAVA_HOME
$(warning WARNING: Variable JAVA_HOME is not set! Use default value.)
JAVA_HOME=/usr/lib/jvm/java
endif

#
# Java compiler option
#
CLASSPATH+=:$(PWD)
JAVAC = $(JAVA_HOME)/bin/javac
JAVAC_FLAGS = -cp $(CLASSPATH)

#
# C++ compiler options
# 
CXXFLAGS += -Wall -Wextra -ansi -pedantic
#CXXFLAGS += -g
#CXXFLAGS += -DNDEBUG
CXXFLAGS += -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/linux
LDFLAGS += -L$(JAVA_HOME)/jre/lib/i386 -L$(JAVA_HOME)/jre/lib/amd64 -L$(JAVA_HOME)/jre/lib/i386/client/ -L$(JAVA_HOME)/jre/lib/amd64/server/
LDLIBS += -ljvm

#
# GIWS options
#
GIWS = $(project_home)/tools/giws/giws
#GIWS_FLAGS = -p -e -g --header-extension-file=.hpp
GIWS_FLAGS = -p -e -g


PACKAGE_NAME = tdigestx
OBJECT_NAME = TDigestProxy
BINARY = test_tdigest_proxy

GIWS_CPP_FILE  = $(BINARY).cpp
GIWS_DESC_FILE = $(OBJECT_NAME).giws.xml
GIWS_OUT_FILES = $(addprefix $(PACKAGE_NAME),.cpp .hxx)
GIWS_OBJ_FILES = $(addprefix $(PACKAGE_NAME),.o)

# in case of --throws-exception-on-error, add 2 files to the list
# of the ones generated by GIWS.
ifneq (,$(findstring --throws-exception-on-error,$(GIWS_FLAGS)))
	GIWS_OUT_FILES += GiwsException.cpp GiwsException.hxx
	GIWS_OBJ_FILES += GiwsException.o
else ifneq (,$(findstring -e,$(GIWS_FLAGS)))
	GIWS_OUT_FILES += GiwsException.cpp GiwsException.hxx
	GIWS_OBJ_FILES += GiwsException.o
endif

#########################################################################
#########################################################################
#########################################################################

# look for sources in current folder and in package name
VPATH = .:$(PACKAGE_NAME)

all: TDigestClient.class \
	 $(OBJECT_NAME).class \
	 Test$(OBJECT_NAME).class \
	 $(GIWS_OUT_FILES) \
	 $(GIWS_OBJ_FILES)
	 #$(BINARY)
	@if test $(MAKELEVEL) -eq 0; then \
		echo "==========================================================================="; \
		echo "Dont forget to set library path before running the program:"; \
		echo "# export LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(JAVA_HOME)/jre/lib/i386:$(JAVA_HOME)/jre/lib/i386/server:$(JAVA_HOME)/jre/lib/i386/client"; \
		echo "or (for 64 bit architectures):"; \
		echo "# export LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(JAVA_HOME)/jre/lib/amd64:$(JAVA_HOME)/jre/lib/amd64/server:$(JAVA_HOME)/jre/lib/amd64/client"; \
		echo "==========================================================================="; \
    fi  

# build java class files
%.class: %.java
	$(JAVAC) $(JAVAC_FLAGS) $^

# build output binary
#$(BINARY): $(GIWS_CPP_FILE) $(GIWS_OUT_FILES)
#	$(CXX) $(CXXFLAGS) -o $(BINARY) $^ $(LDFLAGS) $(LDLIBS)
#	@if test $(MAKELEVEL) -eq 0; then \
#		echo "==========================================================================="; \
#		echo "Dont forget to set library path before running the program:"; \
#		echo "# export LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(JAVA_HOME)/jre/lib/i386:$(JAVA_HOME)/jre/lib/i386/server:$(JAVA_HOME)/jre/lib/i386/client"; \
#		echo "or (for 64 bit architectures):"; \
#		echo "# export LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(JAVA_HOME)/jre/lib/amd64:$(JAVA_HOME)/jre/lib/amd64/server:$(JAVA_HOME)/jre/lib/amd64/client"; \
#		echo "==========================================================================="; \
#    fi  

#build: $(GIWS_CPP_FILE) $(GIWS_OUT_FILES)
#	$(CXX) $(GIWS_CPP_FILE) $(GIWS_OUT_FILES) $(CXXFLAGS) $(LDFLAGS) $(LDLIBS) $(INCLUDES) -o $(BINARY)

# run giws to generate cpp code
$(GIWS_OUT_FILES):
	$(GIWS) -f $(GIWS_DESC_FILE) $(GIWS_FLAGS)

$(GIWS_OBJ_FILES): $(GIWS_OUT_FILES)

clean:
	$(RM) *.o
	$(RM) *.class
	$(RM) $(GIWS_OUT_FILES) \
		  $(PACKAGE_NAME).hxx \
		  $(PACKAGE_NAME)/$(OBJECT_NAME).class \
		  $(BINARY)
